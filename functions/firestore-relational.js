(function(a,l){typeof exports=="object"&&typeof module<"u"?l(exports,require("firebase-admin/firestore"),require("firebase-functions/v2/https")):typeof define=="function"&&define.amd?define(["exports","firebase-admin/firestore","firebase-functions/v2/https"],l):(a=typeof globalThis<"u"?globalThis:a||self,l(a.FirestoreRelational={},a.firebaseadminfirestore,a.firebasefunctionsv2https))})(this,function(a,l,j){"use strict";const O="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");function F(t){if(t===0)return"0";const n=[];for(;t>0;)n.push(O[t%62]),t=Math.floor(t/62);return n.join("")}function w(t,n=0){const i=typeof t=="string"?t:typeof t=="object"?JSON.stringify(t):`${typeof t}(${String(t)})`;let e=3735928559^n,o=1103547991^n;for(let h=0,u;h<i.length;h++)u=i.charCodeAt(h),e=Math.imul(e^u,2246822519),o=Math.imul(o^u,3266489917);e^=Math.imul(e^o>>>15,1935289751),o^=Math.imul(o^e>>>15,3405138345),e^=o>>>16,o^=e>>>16;const f=2097152*(o>>>0)+(e>>>11);return F(f)}function M(t){return{collections:t}}function p(t,n={}){const i={};for(const e in n){const o=n[e];i[e]=o}return{path:t,relations:i,hash:w({path:t,relations:i})}}function R(t){return{type:"has-many",...t,collection:typeof t.collection=="string"?p(t.collection):t.collection}}function T(t){return{type:"has-one",...t,collection:typeof t.collection=="string"?p(t.collection):t.collection}}console.log("gff v1");function D(t){return{migrate:j.onCall({timeoutSeconds:540},async n=>{console.log("v1");const{collectionPath:i}=n.data,e=t.collections.find(({path:c})=>c===i);if(!e){const c=t.collections.map(({path:s})=>s);throw new Error(`No schema found for collection with path ${i}. Schemas found for ${c.join(",")}`)}const o=w(e),{path:f,relations:h}=e,u=Object.entries(h),d=await l.getFirestore().collection(f).get();for(const c of d.docs){const s={id:c.id,...c.data()};if(s.__firestoreRelationalSchemaHash===o){console.log("skipping",s);continue}console.log("doc",s,"does not have current hash",o);const r=await b(`${i}/${c.id}`,s,u),m=JSON.stringify(s),g=JSON.stringify({...s,...r}),$=JSON.stringify(r);g===m||$==="{}"||(console.log("diff!",{data:s,relationData:r,jsonRelational:$}),await l.getFirestore().doc(`${i}/${c.id}`).update(r))}return{message:"This is where we would migrate",collectionPath:i}})}}async function b(t,n,i,e){const o={};for(const[f,{type:h,localKey:u,foreignKey:d,collection:c}]of i){const s=n[u];if(s==null){console.warn(`Tried to set up relation between document ${t} and ${c.path} but the ${u} field was not defined.`);continue}const y=await l.getFirestore().collection(c.path).where(d==="id"?l.FieldPath.documentId():d,"==",s).get();if(h==="has-many"){const r=[];for(const m of y.docs){const g=await S(m,c);r.push(g)}o[f]=r}else if(h==="has-one"){const[r]=y.docs;if(!r){console.warn(`Tried to set up relation between document ${t} and ${c.path} but there are no documents with ${d} == ${JSON.stringify(s)}`);continue}o[f]=await S(r,c)}}return o}async function S(t,n,i){const e=Object.keys(n.relations).length>0,o={id:t.id,...t.data()};if(!e)return o;const f=await b(`${n.path}/${t.id}`,o,Object.entries(n.relations));return Object.assign(o,f),o}a.collection=p,a.getFirebaseFunctions=D,a.hasMany=R,a.hasOne=T,a.project=M,Object.defineProperty(a,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
