(function(o,r){typeof exports=="object"&&typeof module<"u"?r(exports,require("firebase-admin/firestore"),require("firebase-functions/v2/https")):typeof define=="function"&&define.amd?define(["exports","firebase-admin/firestore","firebase-functions/v2/https"],r):(o=typeof globalThis<"u"?globalThis:o||self,r(o.FirestoreRelational={},o.firebaseadminfirestore,o.firebasefunctionsv2https))})(this,function(o,r,$){"use strict";function j(e){return{collections:e}}function y(e,c={}){const i={};let l;for(const t in c){const a=c[t];a.type==="sequence-field"?l=t:i[t]=a}return{path:e,relations:i,sequenceKey:l}}function O(){return{type:"sequence-field"}}function S(e){return{type:"has-many",...e,collection:typeof e.collection=="string"?y(e.collection):e.collection}}function F(e){console.log("we are in hasOne");debugger;return{type:"has-one",...e,collection:typeof e.collection=="string"?y(e.collection):e.collection}}function q(e){return{migrate:$.onCall({timeoutSeconds:540},async c=>{const{collectionPath:i}=c.data,l=e.collections.find(({path:n})=>n===i);if(!l){const n=e.collections.map(({path:s})=>s);throw new Error(`No schema found for collection with path ${i}. Schemas found for ${n.join(",")}`)}const{path:t,relations:a,sequenceKey:w}=l,h=Object.entries(a),d=await r.getFirestore().collection(t).get();for(const n of d.docs){const s={id:n.id,...n.data()},f=await g(`${i}/${n.id}`,s,h),u=JSON.stringify(s),m=JSON.stringify({...s,...f}),p=JSON.stringify(f);m===u||p==="{}"||(console.log("diff!",{data:s,relationData:f,jsonRelational:p}),await r.getFirestore().doc(`${i}/${n.id}`).update(f))}return{message:"This is where we would migrate",collectionPath:i}})}}async function g(e,c,i,l){const t={};for(const[a,{type:w,localKey:h,foreignKey:d,collection:n}]of i){const s=c[h];if(s==null){console.warn(`Tried to set up relation between document ${e} and ${n.path} but the ${h} field was not defined.`);continue}const f=await r.getFirestore().collection(n.path).where(d==="id"?r.FieldPath.documentId():d,"==",s).get();if(w==="has-many"){const u=[];for(const m of f.docs){const p=await b(m,n);u.push(p)}t[a]=u}else if(w==="has-one"){const[u]=f.docs;if(!u){console.warn(`Tried to set up relation between document ${e} and ${n.path} but there are no documents with ${d} == ${JSON.stringify(s)}`);continue}t[a]=await b(u,n)}}return t}async function b(e,c,i){const l=Object.keys(c.relations).length>0,t={id:e.id,...e.data()};if(!l)return t;const a=await g(`${c.path}/${e.id}`,t,Object.entries(c.relations));return Object.assign(t,a),t}o.collection=y,o.getFirebaseFunctions=q,o.hasMany=S,o.hasOne=F,o.project=j,o.sequenceField=O,Object.defineProperty(o,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
