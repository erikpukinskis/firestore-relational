(function(t,c){typeof exports=="object"&&typeof module<"u"?c(exports,require("firebase-admin/firestore"),require("firebase-functions/v2/https")):typeof define=="function"&&define.amd?define(["exports","firebase-admin/firestore","firebase-functions/v2/https"],c):(t=typeof globalThis<"u"?globalThis:t||self,c(t.FirestoreRelational={},t.firebaseadminfirestore,t.firebasefunctionsv2https))})(this,function(t,c,w){"use strict";function b(n){return{collections:n}}function j(n,r={}){const o={};let a;for(const s in r){const l=r[s];l.type==="sequence-field"?a=s:o[s]=l}if(!a)throw new Error(`Your collection must include a sequence field for ordering migrations. Try adding createdAt: sequenceField() to your ${n} schema.`);return{path:n,relations:o,sequenceKey:a}}function q(){return{type:"sequence-field"}}function S(n){return{type:"has-many",...n}}function $(n){return{type:"has-one",...n}}function F(n){return{migrate:w.onCall({timeoutSeconds:540},async r=>{console.log("migrate me!");debugger;const{collectionPath:o}=r.data,a=n.collections.find(({path:e})=>e===o);if(!a){const e=n.collections.map(({path:i})=>i);throw new Error(`No schema found for collection with path ${o}. Schemas found for ${e.join(",")}`)}const{path:s,relations:l,sequenceKey:p}=a,h=Object.entries(l),g=await c.getFirestore().collection(s).get();for(const e of g.docs){const i={id:e.id,...e.data()},f=await m(`${o}/${e.id}`,i,h),y=JSON.stringify(i),d=JSON.stringify({...i,relationData:f}),u=JSON.stringify(f);d===y||u==="{}"||(console.log("diff!",{data:i,relationData:f,jsonRelational:u}),await c.getFirestore().doc(`${o}/${e.id}`).update(f))}return{message:"This is where we would migrate",collectionPath:o}})}}async function m(n,r,o,a){const s={};for(const[l,{type:p,localKey:h,foreignKey:g,collection:e}]of o)if(p==="has-many"){const i=r[h];if(i==null){console.warn(`Tried to set up relation between document ${n} and ${e.path} but the ${h} field was not defined.`);continue}const f=await c.getFirestore().collection(e.path).where(g,"==",i).get(),y=[];for(const d of f.docs){const u={id:d.id,...d.data()};Object.keys(e.relations).length>1&&Object.assign(u,await m(`${e.path}/${d.id}`,u,Object.entries(e.relations))),y.push(u),s[l]=y}}else p==="has-one"&&console.log("has-one not yet supported");return s}t.collection=j,t.getFirebaseFunctions=F,t.hasMany=S,t.hasOne=$,t.project=b,t.sequenceField=q,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
